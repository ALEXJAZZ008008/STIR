/*!
  \file
  \ingroup IO
  \brief Declaration of class stir::InputStreamWithRecords

  \author Nikos Efthimiou

*/
/*
    This file is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*/

#ifndef __stir_IO_InputStreamFromROOTFile_H__
#define __stir_IO_InputStreamFromROOTFile_H__

#include "stir/shared_ptr.h"
#include "stir/Succeeded.h"

#include <iostream>
#include <string>
#include <vector>

#include <TROOT.h>
#include <TSystem.h>
#include <TChain.h>
#include <TH2D.h>
#include <TDirectory.h>
#include <TList.h>
#include <TChainElement.h>
#include <TTree.h>
#include <TFile.h>
#include <TVersionCheck.h>

START_NAMESPACE_STIR

//! A helper class to read data from a ROOT file Generated by GATE simulation toolkit
/*! \ingroup IO
        \author Nikos Efthimiou

        \details This class takes as input a root file, and returns the data stored in a meaningfull
        way.
*/
template <class RecordT, class OptionsT>
        class InputStreamFromROOTFile
{
public:
    typedef std::vector<std::streampos>::size_type SavedPosition;
    //    //! Constructor taking a ROOT file
    //    /*! Data will be assumed to start at the current position reported by seekg().
    //      If reset() is used, it will go back to this starting position.*/
    //    //!
    //    //! \brief InputStreamFromROOTFile
    //    //! \param stream_ptr
    //    //! \param size_of_record_signature
    //    //! \param max_size_of_record
    //    //! \param options
    //    //! \warning Is going to be deleted
    //    inline
    //    InputStreamFromROOTFile(const shared_ptr<std::istream>& stream_ptr,
    //                            const std::size_t size_of_record_signature,
    //                            const std::size_t max_size_of_record,
    //                            const OptionsT& options);

    //    //! Constructor taking a filename
    //    /*! File will be opened in binary mode. Data will be assumed to
    //      start at \a start_of_data.
    //  */
    //    //!
    //    //! \brief InputStreamFromROOTFile
    //    //! \param filename
    //    //! \param size_of_record_signature
    //    //! \param max_size_of_record
    //    //! \param options
    //    //! \param start_of_data
    //    //! \warning Is going to be deleted
    //    //!
    //    inline
    //    InputStreamFromROOTFile(const std::string& filename,
    //                            const std::size_t size_of_record_signature,
    //                            const std::size_t max_size_of_record,
    //                            const OptionsT& options,
    //                            const std::streampos start_of_data = 0);



    //!
    //! \brief InputStreamFromROOTFile
    //! \param filename
    //! \author Nikos Efthimiou
    //! \details The actual default contractor of this class.
    //!
    inline
    InputStreamFromROOTFile(const std::string& filename,
                            int crystal_repeater_x, int crystal_repeater_y, int crystal_repeater_z,
                            int submodule_repeater_x, int submodule_repeater_y, int submodule_repeater_z,
                            int module_repeater_x, int module_repeater_y, int module_repeater_z,
                            int rsector_repeater);


    virtual ~InputStreamFromROOTFile() {}

    //!
    //! \brief get_next_record
    //! \param record
    //! \return
    //! \author Nikos Efthimiou
    //!  \details Returns the next record in the ROOT file.
    //!  The code is adapted from Sadek A. Nehmeh and CR Schmidtlein,
    //! downloaded from <a href="http://www.opengatecollaboration.org/STIR">GATE website</a>
    inline
    virtual
    Succeeded get_next_record(RecordT& record) ;


    //!
    //! \brief reset
    //! \return
    //! \author Nikos Efthimiou
    //!  \details go back to starting position
    //!  \warning Has no significant functionality. Is maintained for compatibility.
    inline
    Succeeded reset();


    //!
    //! \brief save_get_position
    //! \return
    //! \author Nikos Efthimiou
    //! \warning This function currently does nothing.
    //! I left it for compatibility.
    inline
    SavedPosition save_get_position();

    //!
    //! \brief set_get_position
    //! \return
    //! \author Nikos Efthimiou
    //! \warning This function currently does nothing.
    //! I left it for compatibility.
    inline
    Succeeded set_get_position(const SavedPosition&);

    //!
    //! \brief get_saved_get_positions
    //! \return
    //! \author Nikos Efthimiou
    //! \warning This function currently does nothing.
    //! I left it for compatibility.
    inline
    std::vector<std::streampos> get_saved_get_positions() const;

    //!
    //! \brief set_saved_get_positions
    //! \author Nikos Efthimiou
    //! \warning This function currently does nothing.
    //! I left it for compatibility.
    inline
    void set_saved_get_positions(const std::vector<std::streampos>& );

    //!
    //! \brief get_total_number_of_events
    //! \return Returns the total number of events in the ROOT file.
    //! \author Nikos Efthimiou
    inline
    long long int
    get_total_number_of_events();

private:

    Succeeded initialize_root_read_out();

    const std::string filename;

    long long int starting_stream_position;
    long long int nentries;
    long long int current_position;
    long long int saved_get_position;
    OptionsT options;

    // ROOT chain
    TChain *stream_ptr = NULL;

    // Variables to store root information
    Int_t           eventID1, eventID2;
    Int_t           crystalID1, crystalID2;
    Int_t           submoduleID1, submoduleID2;
    Int_t           moduleID1, moduleID2;
    Int_t           rsectorID1, rsectorID2;
    Int_t           rotationAngle;
    Float_t         globalPosX1, globalPosX2, sourcePosX1, sourcePosX2, sourcePosY1, sourcePosY2;
    Float_t         globalPosY1, globalPosY2, globalPosZ1, globalPosZ2, sourcePosZ1, sourcePosZ2;
    Double_t        time1, time2;
    Float_t         energy1, energy2;
    Int_t           sourceid1, sourceid2;
    Int_t           comptonphantom1, comptonphantom2;

    int crystal_repeater_x;
    int crystal_repeater_y;
    int crystal_repeater_z;
    int submodule_repeater_x;
    int submodule_repeater_y;
    int submodule_repeater_z;
    int module_repeater_x;
    int module_repeater_y;
    int module_repeater_z;
    int rsector_repeater;
};

END_NAMESPACE_STIR

#include "stir/IO/InputStreamFromROOTFile.inl"

#endif
