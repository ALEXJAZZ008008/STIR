<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>
    <title>Summary of changes in STIR release 2.1 beta (dated March 2011)</title>
  </head>

  <body>
    <h1>Summary of changes in STIR release 2.1 beta (dated March 2011)</h1>

<p>Most of the work in this update was by Kris Thielemans (Hammersmith Imanet Ltd)
and Charalampos Tsoumpas (Imperial College and Hammersmith Imanet Ltd).
Some older code by Sanida Mustafovic (Imperial College and Hammersmith Imanet Ltd) 
has now finally been incorporated into STIR as well.
Other contributions are mentioned explicitly below.<br />
See also the new <tt>contrib</tt> sub-directory available in the documentation zip file.
</p>
<ul>
<li>Single scatter estimation routines<br />
Contributors: Charalampos Tsoumpas, Pablo Aguiar (Univ of Barcelona, when working on this topic), 
Nikolaos Dikaios (National Technical University of Athens, when working on this topic) 
and Kris Thielemans.
</li>
<li>Parametric image estimation routines.<br />
Contributors: Charalampos Tsoumpas and Kris Thielemans
</li>

<li>B-spline interpolation functions and a few numerical algorithms.<br />
Contributors: Charalampos Tsoumpas, 
Nikolaos Dikaios (National Technical University of Athens, when working on this topic) 
and Kris Thielemans.
</li>
</ul>

<h2> Summary for end users (also to be read by developers)</h2>

<h3>Important bug fixes</h3>
<ul>
<li>fixed a problem in the computation for the gradient of the Poisson log-likelihood that occured
if a viewgram of the measured data was zero (which should occur only a dramatically noisy situations).</li>
<li>fixed a problem in the computation of the Poisson log-likelihood that the multiplicative term of the 
model was ignored. Objective function values prior to this fix were therefore incorrect (except for the 
case where there was no multiplicative term). However, this bug did not affect actual reconstructed images.<br />
(In addition, the computation of the objective function now has increased numerical accuracy.)</li>
<li>the MPI support for OSMAPOSL introduced in STIR 2.0 was broken (it did not compile, and after 
easy fixes did not give the correct result).</li>
</ul>
<h3>Known problems</h3>
<ul>
<li>ECAT6 routines seem to have problems since STIR 2.0. ECAT6 is therefore no longer supported</li>
<li>The interpolating back-projector can still give problems in the centre of the images
on some architectures/compiler/optimisation settings.</li>
</ul>

<h3>New utilities</h3>
<ul>
<li><tt>abs_image</tt>, <tt>convert_to_binary_image.cxx</tt>, <tt>find_fwhm_in_image</tt></li>
<li>Utilities in <tt>modelling_utilities</tt>.
<li>Parametric image reconstruction algorithms <tt>POSMAPOSL</tt> and <tt>POSSPS</tt>. 
Currently we have only an objective function for Patlak, but extension
to other linear models is easy.</li>
<li>A few scripts are now also copied with <tt>make install</tt>, including the
new <tt>stir_print_voxel_sizes.sh</tt>
</ul>


<h3>New functionality of existing utilities</h3>
<ul>
<li>Added data for the <strong>GE Discovery 600</strong>.</li>
<li>Added data for the <strong>Biograph 16</strong> (by Robert Barnett, Westmead Hospital, Sydney).</li>
<li><tt>stir_math</tt> has 2 new options <tt>--parametric</tt> or <tt>--dynamic</tt>.</li>
<li><tt>OSMAPOSL</tt> and <tt>OSSPS</tt> have a new "subset sensitivity filenames" which can be set to 
e.g. <tt>subsens_%d.hv</tt>. This is useful when <tt>use_subset_sensitivities</tt> is set (which is now
<strong>recommended</strong>).</li>
<li> <tt>OSMAPOSL</tt> now accepts a prior even if <tt>use_subset_sensitivities</tt> is set.</li>
<li>In addition to <tt>OSMAPOSL</tt>, <tt>OSSPS</tt> is now also parallelised when using <i>MPI</i>.
</ul>

<h3>Functionality changes</h3>
<ul>
<li>The ray tracing projection matrix can be enabled (at compile time) to use a circular FOV 
that goes to the edge of the image (i.e. approx one pixel larger than what it used to be). 
However, enabling this gave a change in the <tt>recon_test_pack</tt> results (probably mostly because 
that data contains scatter, while the <tt>recon_test_pack</tt> code does not model scatter). Therefore,
this change is disabled by default. You can add <tt>-DSTIR_PMRT_LARGER_FOV</tt> to <tt>EXTRA_CFLAGS</tt>
if you want this anyway.
</li>
<li>Most utilities will now display a somewhat involved message when an error occured. Exact format
will be system/compiler dependent, but could be something like
<pre>
ERROR: Error opening file test.hv

terminate called after throwing an instance of 'std::string'
Aborted (core dumped)
</pre>
The useful bit is after the <tt>ERROR</tt> string. Ignore the rest (see <a href="#errorThrowsException">
here why this happens</a>).
</li>
</ul>

<h3>Documentation changes</h3>
<ul>
<li>updated doxygen and User's Guide</li>
 </ul>

<h3>recon_test_pack changes</h3>
<ul>
<li>Moved the tests for the ecat routines to a separate file <tt>run_ecat_tests.sh</tt></li>
<li>Created a new script <tt>run_test_simulate_and_recon.sh</tt> that performs a 
simple analytic simulation of a uniform cylinder,
reconstructs it with all STIR reconstruction algorithms and checks ROI values.</li>
<li>Updated Windows batch files. They were broken in STIR 2.0</li>
</ul>

<h3>Other changes to tests</h3>
<ul>
<li>A new test in <tt>recon_test</tt> checks the gradient computation vs
a numerical gradient by computing the objective function. This is currently
only enabled for <code>PoissonLogLikelihoodWithLinearModelForMeanAndProjData</code>.
</li>
</ul>

<H2>What's new for developers (aside from what should be obvious
from the above):</H2>

<h3>Major bugs fixed</h3>
<ul>
<li> <code>ProjData::set_segment</code> was always writing the same data 
(namely the one where view_num=segment_num). This bug existed since the
very first version of STIR. Nobody seems to have been using
this function, as the result was obviously wrong.</li>
</ul>

<h3>New functionality</h3>
<ul>
<li><code>ArrayFilter2DUsingConvolution</code> and <code>ArrayFilter3DUsingConvolution</code>.</li>
<li>Preliminary classes for dynamic and gated data</li>
<li>New member <code>fill_nonidentifiable_target_parameters</code> of the 
<code>GeneralisedObjectiveFunction</code> hierarchy. This used by OSSPS to avoid problems
when initialising with images that have for instance been reconstructed on a square grid.</li>
<li>B-spline interpolation functions and a few numerical algorithms (IIR and FIR filters, 
1d numerical integration).</li>
</ul>

<h3>Other code changes</h3>
<ul>
<li><a name="errorThrowsException"><code>error()</code> now throws an exception as opposed to calling exit</a>, 
such that we can catch 
the exception in a calling routine. This would be essential for building GUIs etc. Unfortunately,
for the user this has the potential to generate some confusion as the error message
when a STIR program calls <code>error()</code> now talks about unhandled exception.
The best way to solve this would be to catch all exceptions in each <code>main()</code>, but
that is a lot of work...</li>
<li><code>ProjDataInfoCylindrical::set_num_views()</code> now  makes sure that we cover the
      same range of angles as before (usually, but not necessarily, 180 degrees).
</li>
<li><tt>PoissonLogLikelihoodWithLinearModelForMean</tt> has been changed to be more consistent
in the subset sensitivity interface:
- The parser has a new keyword "subset sensitivity filenames" which can be set to e.g. subsens_%d.hv
- Derived classes have to define a virtual function set_up_before_sensitivity() (essentially
replacing what they used to have in setup() before, except for the call to base_type::setup()).
- setup() now class set_up_before_sensitivity(), computes (subset)sensitivities, and if required,
writes them to disk.
- get_sensitivity(subset_num) is replaced by get_sensitivity() and get_subset_sensitivity(subset_num)
- set_sensitivity_sptr is now called set_subset_sensitivity_sptr
- fill_nonidentifiable_target_parameters uses get_sensitivity() and hence no longer only checks the first subset.

<li>Most of the .cxx files in the <tt>recon_buildblock</tt> had to be updated to
add instantiations for parametric images. This is unfortunate and another
mechanism would be nicer.
</li>
<li>moved code that finds subset-num in terms of subiteration-num to 
<code>IterativeReconstruction::get_subset_num()</code>. If you have your own 
reconstruction classes, you should use this member. 
<code>IterativeReconstruction::randomly_permute_subset_order()</code> is now private.</li>
<li><code>read_stream_in_memory</code> (in <tt>utilities.h</tt>) now takes a <code>file_size</code> 
argument of type <code>std::streamsize</code> as opposed to <code>unsigned long</code>. As
this parameter is passed as a reference, this change is <strong>not backwards compatible</strong>
(at least on systems where these 2 types are not equal).</li>
<li>FullArrayIterator and NestedIterator now have extra constructors to be able to convert
compatible iterators (e.g. full_iterator to const_full_iterator).</li>
<li>NestedIterator has more help classes for cases where the top-level iterator refers to 
a pointer to the 2nd level iterator.</li>
<li>Various small fixes for more recent compilers such as gcc 4.3 and Visual Studio Express 2010.</li>
<li>Initial release of files for an alternative cross-platform build system 
<a href="http://www.cmake.org">CMake</a>, based on example files provided by 
Robert Barnett (Westmead Hospital, Sydney). This is much better for configuration and finding system dependencies.
However, tests are not yet included in the CMakeFiles.</li>
</ul>

</body>

</html>

